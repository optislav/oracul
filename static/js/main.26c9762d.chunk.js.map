{"version":3,"sources":["robot.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","recognitionRef","useRef","textRef","useState","forceUpdate","textAreaRef","useEffect","recognition","webkitSpeechRecognition","speechRecognitionList","webkitSpeechGrammarList","addFromString","grammars","lang","interimResults","maxAlternatives","current","onresult","event","a","newText","results","transcript","console","log","trim","length","ta","resizableTextArea","textArea","scrollTop","scrollHeight","data","prompt","fetch","body","JSON","stringify","response","json","reply","replies","uter","SpeechSynthesisUtterance","pitch","rate","speechSynthesis","speak","isVisible","setIsVisible","closeModal","className","title","visible","onOk","cancelText","onCancel","Title","level","src","robot","alt","onClick","start","TextArea","ref","value","onChange","args","rows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAAe,MAA0B,kC,OC6G1BA,MAvGf,WACE,IAAMC,EAAiBC,iBAAO,MACxBC,EAAUD,iBAAO,IAFV,EAGWE,mBAAS,IAAxBC,EAHI,oBAIPC,EAAcJ,iBAAO,MAE3BK,qBAAU,WACR,IACMC,EAAc,IAAIC,wBAClBC,EAAwB,IAAIC,wBAClCD,EAAsBE,cAHN,qMAG6B,GAC7CJ,EAAYK,SAAWH,EAEvBF,EAAYM,KAAO,QACnBN,EAAYO,gBAAiB,EAC7BP,EAAYQ,gBAAkB,EAC9Bf,EAAegB,QAAUT,EAEzBA,EAAYU,SAAZ,uCAAuB,WAAeC,GAAf,2BAAAC,EAAA,6DACfC,EAAUF,EAAMG,QAAQ,GAAG,GAAGC,WACpCC,QAAQC,IAAIJ,GACsC,MAA9CA,EAAQK,OAAOL,EAAQK,OAAOC,OAAS,GACzCxB,EAAQc,QAAR,UAAqBd,EAAQc,QAA7B,aAAyCI,GAEzClB,EAAQc,QAAR,UAAqBd,EAAQc,QAA7B,aAAyCI,EAAzC,KAEFhB,EAAY,KACNuB,EAAKtB,EAAYW,QAAQY,kBAAkBC,UAC9CC,UAAYH,EAAGI,aACZC,EAAO,CACXC,OAAO,GAAD,OAAK/B,EAAQc,SACnBU,OAAQN,EAAQM,QAbG,SAeEQ,MAAM,yCAA0C,CACrE,QAAW,CACT,OAAU,MACV,kBAAmB,0BACnB,eAAgB,2BAChB,iBAAkB,QAClB,iBAAkB,OAClB,iBAAkB,cAEpB,eAAkB,cAClBC,KAAMC,KAAKC,UAAUL,GACrB,OAAU,OACV,KAAQ,OACR,YAAe,SA5BI,cAefM,EAfe,iBA8BFA,EAASC,OA9BP,QA8BfA,EA9Be,OA+BfC,EAAQD,EAAKE,QAAQ,GAC3BvC,EAAQc,QAAR,UAAqBd,EAAQc,QAA7B,aAAyCwB,GACzCpC,EAAY,IACZuB,EAAGG,UAAYH,EAAGI,cACdW,EAAO,IAAIC,yBAAyBH,IACnC3B,KAAO,QACZ6B,EAAKE,MAAQ,IACbF,EAAKG,KAAO,IACZC,gBAAgBC,MAAML,GAvCD,4CAAvB,wDAyCC,IAGH,IA9Da,EAuEqBvC,oBAAS,GAvE9B,mBAuEN6C,EAvEM,KAuEKC,EAvEL,KAwEPC,EAAa,WACjBD,GAAa,IAGf,OACE,sBAAKE,UAAU,MAAf,UACE,eAAC,IAAD,CAAOA,UAAU,QAAQC,MAAM,+DAAaC,QAASL,EAAWM,KAAMJ,EAAYK,WAAW,eAAKC,SAAUN,EAA5G,UACE,cAAC,IAAWO,MAAZ,CAAkBC,MAAO,EAAzB,kKAGA,+BACE,qIACA,4OACA,qLAGJ,qBAAKP,UAAU,YAAYQ,IAAKC,EAAOC,IAAI,GAAGC,QA1B9B,WAClB9D,EAAegB,QAAQ+C,QACvBxC,QAAQC,IAAI,wCAyBV,sBAAK2B,UAAU,QAAf,UACE,cAAC,IAAWM,MAAZ,oGACA,cAAC,IAAMO,SAAP,CACEC,IAAK5D,EACL8C,UAAU,WACVe,MAAOhE,EAAQc,QACfmD,SA5Ba,WAAc,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAChC7C,QAAQC,IAAI4C,IA4BNC,KAAM,YC1FDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.26c9762d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/robot.26134c8c.jpg\";","/* eslint-disable no-undef */\r\nimport { Input, Modal, Typography } from 'antd';\r\nimport robot from './robot.jpg';\r\nimport './App.css';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\nfunction App() {\r\n  const recognitionRef = useRef(null);\r\n  const textRef = useRef('');\r\n  const [, forceUpdate] = useState({});\r\n  const textAreaRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const grammar = '#JSGF V1.0; grammar colors; public <color> = белый | розовый | черный | серый ;'\r\n    const recognition = new webkitSpeechRecognition();\r\n    const speechRecognitionList = new webkitSpeechGrammarList();\r\n    speechRecognitionList.addFromString(grammar, 1);\r\n    recognition.grammars = speechRecognitionList;\r\n    //recognition.continuous = false;\r\n    recognition.lang = 'ru-RU';\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 1;\r\n    recognitionRef.current = recognition;\r\n\r\n    recognition.onresult = async function(event) {\r\n      const newText = event.results[0][0].transcript;\r\n      console.log(newText);\r\n      if (newText.trim()[newText.trim().length - 1] === '?') {\r\n        textRef.current = `${textRef.current}\\n${newText}`;\r\n      } else {\r\n        textRef.current = `${textRef.current}\\n${newText}.`;\r\n      }\r\n      forceUpdate({});\r\n      const ta = textAreaRef.current.resizableTextArea.textArea;\r\n      ta.scrollTop = ta.scrollHeight;\r\n      const data = {\r\n        prompt: `${textRef.current}`,\r\n        length: newText.length,\r\n      }\r\n      const response = await fetch(\"https://pelevin.gpt.dobro.ai/generate/\", {\r\n        \"headers\": {\r\n          \"accept\": \"*/*\",\r\n          \"accept-language\": \"en-US,en;q=0.9,ru;q=0.8\",\r\n          \"content-type\": \"text/plain;charset=UTF-8\",\r\n          \"sec-fetch-dest\": \"empty\",\r\n          \"sec-fetch-mode\": \"cors\",\r\n          \"sec-fetch-site\": \"cross-site\"\r\n        },\r\n        \"referrerPolicy\": \"no-referrer\",\r\n        body: JSON.stringify(data),\r\n        \"method\": \"POST\",\r\n        \"mode\": \"cors\",\r\n        \"credentials\": \"omit\"\r\n      });\r\n      const json = await response.json();\r\n      const reply = json.replies[0];\r\n      textRef.current = `${textRef.current}\\n${reply}`;\r\n      forceUpdate({});\r\n      ta.scrollTop = ta.scrollHeight;\r\n      var uter = new SpeechSynthesisUtterance(reply);\r\n      uter.lang = 'ru-RU';\r\n      uter.pitch = 0.01;\r\n      uter.rate = 2.3;\r\n      speechSynthesis.speak(uter);\r\n    };\r\n  }, []);\r\n\r\n\r\n  const handleClick = () => {\r\n    recognitionRef.current.start();\r\n    console.log('Ready to receive a color command.');\r\n  };\r\n\r\n  const handleChange = (...args) => {\r\n    console.log(args);\r\n  }\r\n\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const closeModal = () => {\r\n    setIsVisible(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Modal className=\"modal\" title=\"Инструкция\" visible={isVisible} onOk={closeModal} cancelText=\"Ок\" onCancel={closeModal}>\r\n        <Typography.Title level={2}>\r\n          Чтобы поговорить с Оракулом:\r\n        </Typography.Title>\r\n        <ol>\r\n          <li>Нажмите на его лицо</li>\r\n          <li>Разрешите браузеру доступ к микрофону</li>\r\n          <li>Задайте ваш вопрос голосом</li>\r\n        </ol>\r\n      </Modal>\r\n      <img className=\"robot-img\" src={robot} alt=\"\" onClick={handleClick} />\r\n      <div className=\"right\">\r\n        <Typography.Title>Оракул отвечает</Typography.Title>\r\n        <Input.TextArea\r\n          ref={textAreaRef}\r\n          className=\"textarea\"\r\n          value={textRef.current}\r\n          onChange={handleChange}\r\n          rows={13}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}